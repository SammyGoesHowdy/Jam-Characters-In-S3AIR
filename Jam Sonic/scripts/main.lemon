// palette options

global u8 change_jam_palette

function u64 getCharacterPaletteKey(u8 character)
{
	if ((character == CHARACTER_SONIC) && (change_jam_palette == 1))
	{
		return "S3_character_palette_sonic"
	}
	else if ((character == CHARACTER_SONIC) && (change_jam_palette == 2))
	{
		return "JamSonicBlacksS3_character_palette_sonic"
	}
	else if ((character == CHARACTER_SONIC) && (change_jam_palette == 3))
	{
		return "gamecom_green_character_palette_sonic"
	}

	return base.getCharacterPaletteKey(character)
}

function string getCharacterEndPosePaletteKey(u8 character)
{
	if ((character == CHARACTER_SONIC) && (change_jam_palette == 1))
	{
		return "s3_endpose_palette_sonic"
	}
		else if ((character == CHARACTER_SONIC) && (change_jam_palette == 2))
	{
		return "s3jamsonicblacks_endpose_palette_sonic"
	}
	else if ((character == CHARACTER_SONIC) && (change_jam_palette == 3))
	{
		return "gamecom_green_endpose_palette_sonic"
	}
	return base.getCharacterEndPosePaletteKey(character) 
}

function string getCharacterBluespherePaletteKey(u8 character)
{
	if ((character == CHARACTER_SONIC) && (change_jam_palette == 1))
	{
		return "s3_endpose_palette_sonic"
	}
		else if ((character == CHARACTER_SONIC) && (change_jam_palette == 2))
	{
		return "s3jamsonicblacks_endpose_palette_sonic"
	}
	else if ((character == CHARACTER_SONIC) && (change_jam_palette == 3))
	{
		return "gamecom_green_bluesphere_palette_sonic"
	}
	return base.getCharacterBluespherePaletteKey(character)
}

function s32 ESS_saveboxgetcolor(u8 chars)
{
	// returns an RGB color
	if (chars == CHARS_SONIC_AND_TAILS)
		return 0x525252
	else if (chars == CHARS_SONIC_ALONE)
		return 0x525252
	return base.ESS_saveboxgetcolor(chars)
}


	// Title card red bar
	if (objA0.update_address == 0x02d8e2)
	{
		Renderer.drawCustomSprite("titlecard_redbar_S3AIR", px - 0x20, py - 0x40, 0x00, SPRITE_FLAG_PRIO | SPRITE_FLAG_NO_GLOBAL_TINT, renderQueue)
		return true
	}


function bool Standalone.onWriteToSpriteTable(s16 px, s16 py, u16 renderQueue)
{
    if (u8[A0 + 0x38] == 0xff && u16[0xffffb04a + 0x30] == 0 && objA0.animation.timer == 0)
    {    
        u64 portrait = 0
		 if (u8[A0 + 0x23] == 0x18)
            portrait = "dataSel_savePortrait_Sonic"
        else if (u8[A0 + 0x23] == 0x19)
            portrait = "dataSel_savePortrait_sonicSuper"

        if (Renderer.hasCustomSprite(portrait))
        {
        #if GAMEAPP >= 0x22051500
            Renderer.drawCustomSprite(portrait, px - 40, py - ((Mods.isModActive("Data Select Character Sprites - MAIN") && System.getGlobalVariableValueByName("MenuStyle.dataSelect") == 0) ? 128 : 120), 0, SPRITE_FLAG_PRIO, renderQueue)
        #endif
        #if GAMEAPP <= 0x22050800
            Renderer.drawCustomSprite(portrait, px - 40, py - 120, 0, SPRITE_FLAG_PRIO, renderQueue)
        #endif
            u8[A0 + 0x23] = 0
        }
    }
    return base.Standalone.onWriteToSpriteTable(px, py, renderQueue)
}

function bool Standalone.onWriteToSpriteTable(s16 px, s16 py, u16 renderQueue)
{
    bool IsSaveEmpty = (u8[0xffffe6ac + (u8[A0 + 0x2e] * 10)] & 0x80) == 0
    if (objA0.update_address == 0x00d42c && u8[A0 + 0x05] == 0x00 && (objA0.animation.sprite == 0x04 || objA0.animation.sprite == 0x05) && IsSaveEmpty)
    {
        u8 SonicAtex = 0x40 + CHARACTER_SONIC * 0x20
        if (Renderer.hasCustomSprite("dataSel_lifeContinue_sonic"))
            Renderer.drawCustomSprite("dataSel_lifeContinue_sonic", px-16, py + 8, SonicAtex, SPRITE_FLAG_PRIO, renderQueue)
    }
    return base.Standalone.onWriteToSpriteTable(px, py, renderQueue)
}